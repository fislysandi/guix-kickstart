;;;; signals.test --- test suite for Guile's signal functions       -*- scheme -*-
;;;;
;;;; Copyright (C) 2009, 2014, 2017, 2019 Free Software Foundation, Inc.
;;;;
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;;
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free
;;;; Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;;;; Boston, MA 02110-1301 USA

(define-module (test-suite test-signals)
  #:use-module (ice-9 match)
  #:use-module (test-suite lib))

(with-test-prefix "sigaction"

  (pass-if-exception "handler arg is an invalid integer"
    exception:out-of-range
    (sigaction SIGINT 51))

  )

(define (time-pair->secs secs-usecs-pair)
  (match secs-usecs-pair
    ((secs . usecs)
     (+ secs (/ usecs 1e6)))))

(when (defined? 'setitimer)
  (with-test-prefix "setitimer"
    (with-test-prefix "current itimers are 0"

      (pass-if "ITIMER_REAL"
        ;; setitimer may have already been called in other tests.  For
        ;; some versions of Cygwin, the return value of setitimer is
        ;; invalid after an alarm has occurred.  See
        ;; https://www.cygwin.com/ml/cygwin/2019-02/msg00395.html
        (if (string-contains %host-type "cygwin")
            (throw 'unresolved)
            (equal? (setitimer ITIMER_REAL 0 0 0 0)
                    '((0 . 0) (0 . 0)))))

      (pass-if "ITIMER_VIRTUAL"
        (if (not (provided? 'ITIMER_VIRTUAL))
            (throw 'unsupported)
            (equal? (setitimer ITIMER_VIRTUAL 0 0 0 0)
                    '((0 . 0) (0 . 0)))))

      (pass-if "ITIMER_PROF"
        (if (not (provided? 'ITIMER_PROF))
            (throw 'unsupported)
            (equal? (setitimer ITIMER_PROF 0 0 0 0)
                    '((0 . 0) (0 . 0))))))

    (with-test-prefix "setting values correctly"
      (pass-if "initial setting"
        (if (not (provided? 'ITIMER_PROF))
            (throw 'unsupported)
            (equal? (setitimer ITIMER_PROF 1 0 3 0)
                    '((0 . 0) (0 . 0)))))
      (pass-if "reset to zero"
        (if (not (provided? 'ITIMER_PROF))
            (throw 'unsupported)
            (match (setitimer ITIMER_PROF 0 0 0 0)
              ((interval value)
               ;; We don't presume that the timer is strictly lower than the
               ;; value at which we set it, given its limited internal
               ;; precision.  Assert instead that the timer is between 2 and
               ;; 3.5 seconds.
               (and (<= 0.9 (time-pair->secs interval) 1.1)
                    (<= 2.0 (time-pair->secs value) 3.5)))))))

    (with-test-prefix "usecs > 1e6"
      (pass-if "initial setting"
        (if (not (provided? 'ITIMER_PROF))
            (throw 'unsupported)
            (equal? (setitimer ITIMER_PROF 1 0 0 #e3e6)
                    '((0 . 0) (0 . 0)))))
      (pass-if "reset to zero"
        (if (not (provided? 'ITIMER_PROF))
            (throw 'unsupported)
            (match (setitimer ITIMER_PROF 0 0 0 0)
              ((interval value)
               ;; We don't presume that the timer is strictly lower than the
               ;; value at which we set it, given its limited internal
               ;; precision.  Assert instead that the timer is between 2 and
               ;; 3.5 seconds.
               (and (<= 0.9 (time-pair->secs interval) 1.1)
                    (<= 2.0 (time-pair->secs value) 3.5)
                    (match value
                      ((secs . usecs)
                       (<= 0 usecs 999999)))))))))))
